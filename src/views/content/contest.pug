//- Contest content on about.pug

//- Article: Contest Rules
mixin rules_article()
  h1 rules
  .bullet.grid
    .num 01.
    .rule 
      | You may not begin development on your site until 
      strong #{dates.startDev}
      | . </br>
      | Failure to do so will result in disqualification.
      
    .num 02.
    .rule 
      | Your site must meet all the 
      span.link(onclick="showDetail('ruletwo')") basic requirements
      #ruletwo.details
        p 
          strong Dynamically-generated, database-backed pages.
          | Your site must contain pages that are produced dynamically by some server-side application (e.g. Node.js, Ruby on Rails, PHP or Python scripts) using the results of queries to some database or other data service. You should use MongoDB -- what we teach in class -- or if you would like to use something else, please confirm with staff first.
        p 
          strong Personalized experience based on user accounts. 
          | Your site must have a sign-in feature. You may implement your own username/password login system or use an existing system (e.g. Facebook or Google login). The content and/or UI of the website should reflect whether a user is logged in and display some non-trivial user-specific content. You are not required to implement account management (e.g. password recovery). Note: If your site uses MIT certificates, you must implement an alternative form of authentication for our non-MIT judges.
        p 
          strong Original design and implementation. 
          | Your site's high-level design and the implementation of key features must be original. You may use Web application frameworks like Express.js or Ruby on Rails and frontend frameworks like Bootstrap and Backbone. You may use open-source components as long as the top-level design is original and your site's main functionality is not simply a wrapper around the component. You may not customize a CMS system such as Wordpress for your site.
    
    .num 03.
    .rule
      | Your site must help users access a nontrivial amount of content. Check out some 
      span.link(onclick="showDetail('rulethree')") reccomended methods
      #rulethree.details
        p 
          strong Pre-generated dataset. 
          | Your database contains a processed version of a publicly accessible dataset, or you can bootstrap your site with fake data. If you choose to bootstrap your site by generating data, be creative! Judges will be bored by a site where the same three names show up everywhere!
        p 
          strong 3rd party data access. 
          | Your system uses another application's publicly accessible API to access and return data on the fly. You must declare all 3rd-party APIs that you use. If you go this route, you should use a database as a cache and fallback mechanism for the API requests. You will be disqualified if your application malfunctions after the submission deadline as a result of a broken 3rd party API.
    
    .num 04.
    .rule
      | Your site must contain some nontrivial frontend feature. At a high level, this means that your site cannot simply consist of pages returned by the server, but rather must support some sort of dynamic user interaction. Here are 
      span.link(onclick="showDetail('rulefour')") some suggestions
      #rulefour.details
        p
          strong Data visualization. 
          | Your application presents data in a visual manner that enhances the users' understanding of the data. The visualization should highlight some feature of the data that isn't obvious or trivial. The user must be able to influence which data gets displayed in the visualizations. You are allowed to use a pre-existing implementation for your visualization, like a jQueryUI widget, provided that it fits with your application. Remember that all widgets and libraries must be cited.
        p
          strong Dynamic filtering. 
          | Your application shows a small (< 10%) subset of data which is most relevant to the user at the moment, or ranks the data such that the most relevant items are shown first. The subset and/or the ordering of the data must change in response to the user's actions. Three examples that would fulfill this requirement are full-text search, criteria-based search, and a "recommended for you" section. For the latter, you will have to convince us that the contents changes based on user actions.
        p 
          strong Asynchronous viewing/modification of data. 
          | After your application is loaded, future additions, modifications, or deletions are done asynchronously (without a new page load). A "single-page app" that contains significant functionality implemented via asynchronous calls to your server would satisfy this requirement.

    .num 05.
    .rule
      | Teams must use version control and host source code on 
      a(href="http://github.com/") Github
      |. Our staff will create repositories for every team as well as teach how to use Github.
    
    .num 06.
    .rule
      | Your site must work in either Chrome or Firefox. Teams will be able to specify browser of choice.
    
    .num 07.
    .rule
      | Teams must comply with US laws and MIT academic policy and integrity policies. You can read 
      span.link(onclick="showDetail('rulefive')") more details about these policies
      #rulefive.details
        p
          strong Plagiarism. 
          | We will ask you to name all your team members and list all the 3rd party data, code, and media that you have used. Please keep careful track of your sources, just like you would for any other course, and include a citation of ALL sources used. This includes, but is not limited to, the use of: 3rd party libraries, code distributed by the staff, code snippets shared on Piazza, and code snippets found on StackOverflow or other forums. For all components of your application that are not your own, include a citation in the README of your repository. Additionally, for code snippets pasted (with or without modification) into your source code, include a brief citation or link to the origin of the code as a comment in the code itself. Plagiarism may result in disqualification, a failing grade, and referral to MIT's Committee of Discipline.
        p
          strong Third-party code/data/media. 
          | Any code or content that is not your own must be public available at no cost through legal means. This includes content such as images, fonts, and stylesheets. All such code and content must be cited in your repository's README (see Plagiarism section above). You may not use any code that you wrote before January 6, 2025, unless it was publicly released.
        p
          strong Straight-forward evil. 
          | Do not spam or host malware. Do not encourage or assist users in breaking non-disclosure agreements or infringing copyright. Your site must not provide a haven for discussion or sharing of topics violating relevant local, state, and Federal laws, including copyright law. Do not abuse MIT's infrastructure or databases. Do not interfere with other contestants' development process.

    .num 08.
    .rule
      | Past competitors who were in a team who have won more than $2,000 in their 6.9620 (formerly 6.148) career are not eligible to compete. Special prizes do not count towards this restriction. If in doubt, please contact the staff.

//- Article: Judging
mixin judging_article()
  h1 judging
  p To be considered for judging, your team and the site you produce must abide by the 
    a(href="#rules") competition rules
    | .

  p When judging contest submissions, we will focus on four main areas:
  ul
    li 
      strong Functionality
      | : whether the site functions without errors; whether the exposed features deliver usable results
    li 
      strong Usability
      | : the overall ease-of-use of the site
    li 
      strong Aesthetics
      | : the attention paid to graphic and UI design; the overall look-and-feel of the site
    li 
      strong Concept Execution
      | : the degree to which the site identifies a problem and provides a realistic solution
  
  p More details about each category are below.

  h3 Functionality
  .descript Functionality concerns the ability of user to visit your site and perform the actions that are advertised. 
    span.link(onclick="showDetail('functionalitydetails')") Read more
    .details#functionalitydetails
      p 
        strong Errors
        | : Does your site load without errors? Are there portions of the site that are not implemented or don't work as intended? Do actions on the site cause uncaught errors or exceptions?
      p 
        strong Features
        | : How many features are implemented? Are they useful, nontrivial, and well-polished? Note that this is not a race to implement as many features as possible -- judges will be more impressed with a reasonable number of polished, well-executed features than a large number of poorly-implemented features. A large, incohesive feature set also reflects poorly on usability and concept execution (see below).
      p 
        strong Response time
        | : Does your site take an egregiously long time to display results? Note that we are not going to benchmark your site or judge your algorithms, but a site that takes five minutes to load query results is unreasonable.
      p 
        strong Security
        | : Can the site be broken with the simplest of attacks? Note that we will not mount complex attacks against your site. The basic mitigations discussed in lecture will suffice.

  h3 Usability
  .descript Usability concerns the ease-of-use and learnability of the site. At a high level, is it obvious to the user what can be done, and does your system behave as expected? 
    span.link(onclick="showDetail('usabilitydetails')") Read more
    .details#usabilitydetails
      p
        strong Ease of learning
        | : Can a user encountering this web site for the first time easily discover what the web site does and how to make it work?
      p
        strong Visibility
        | : Is important information and system state readily visible on the site? Are features clearly indicated?
      p
        strong Efficiency
        | : Is it easy for the user to access all features of the site and be able to use them? Are there mechanisms built in for experienced users to save time? Efficiency generally does not refer to response time, but to how easily the user can perform common tasks on the site. For example, a feature that requires many mouse clicks across many menus to access has poorer efficiency than a features that requires few clicks.
      p
        strong Safety and recovery
        | : Is it easy for a user to make a mistake? Is it easy for a user to recover from a mistake, via undo, edits, or other mechanisms?

  h3 Aesthetics
  .descript Aesthetics concerns the overall look-and-feel of the site and the impression it makes on the user. 
    span.link(onclick="showDetail('aestheticdetails')") Read more
    .details#aestheticdetails
      p 
        strong Layout
        | : Is the overall layout of your site simple or cluttered? Are the user's eyes immediately drawn to the most relevant parts of the page?
      p 
        strong Consistency
        | : Is the visual design of your site consistent across its components? Is there a familiar, comfortable set of colors, shapes, and fonts used?
      p 
        strong Attention to graphic design
        | : Have you considered the basics of graphic design, including: color, balance and whitespace, and typography?
      p 
        strong Aesthetic innovation
        | : Does your site do something particularly fresh, bold, or innovative in its visual design? This could be in the execution of a single feature or visualization or in taking a bold approach to the overall design of your site.
        
  h3 Concept Execution
  .descript Concept execution concerns whether you have identified a real, existing problem and presented a compelling solution. 
    span.link(onclick="showDetail('conceptdetails')") Read more
    .details#conceptdetails
      p
        strong Problem statement
        | : Is the problem clear and well-defined? Is it a real, existing problem?
      p
        strong Conceptual clarity
        | : Does your solution employ a number of clearly-defined concepts? Concepts are ideas and notions that manifest themselves clearly in the implementation of your solution, or a common thread that runs through your feature set.
      p
        strong Feature set
        | : Does your application consist of a coherent, well-thought-out set of features? Do the features make sense when considered as part of a larger whole? Do the features address the problem to be solved?
      p
        strong Originality
        | : Does your application solve the problem in a way that hasn't been done before? Note that you may do well in this category even with a well-established problem, as long as your solution is novel.

  h2 Judging Process
  p The final submission will be a form, to be posted to the Milestones page at a later date. This form will close at exactly 
    strong= dates.finalSubmission + "."
  p After the submission form closes, the staff will identify semifinalists. We expect to have around 12-18 semifinalists (for the Main Division) depending on the quality of the submissions. Results will be announced by 8:00 PM of the same day.
  p Semifinalists will have a 15 minute time slot on #{dates.semifinalist} to give a 5-minute presentation to the judges and answer questions about their site. We recommend that your presentation explain:
  ol
    li What problem does your site aim to solve?
    li How does your site fit the theme?
    li Why is there a need for this problem to be solved?
    li Why does your site solve this problem well?
  //- p Semifinalists will also give a short presentation at the Award Ceremony and must attend a mandatory Winner's Luncheon from #{dates.luncheon}.
  p From the pool of semifinalists, the sponsor judges will determine the top teams. The results will be announced at the Award Ceremony.
  p 
    strong PLEASE NOTE
    | : Your team is allowed to make changes to your site after the final submission deadline. However, if you site is broken when we look at it, you will not have a second chance, so make updates at your own risk.
